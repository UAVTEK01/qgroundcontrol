name: Android APK (Manual)

on:
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-22.04

    env:
      QT_VERSION: "6.8.3"          # QGC requires 6.8.3..6.10.0
      ANDROID_API: "34"
      BUILD_DIR: "build-android"

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install base tools
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y ninja-build unzip zip curl

      - name: Install NDK r27c
        id: ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c

      - name: Export NDK env
        run: |
          echo "ANDROID_NDK_HOME=${{ steps.ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=${{ steps.ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "NDK_ROOT=${{ steps.ndk.outputs.ndk-path }}" >> $GITHUB_ENV

      - name: Install Android SDK (cmdline-tools, platform, build-tools)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
          ANDROID_HOME:     ${{ github.workspace }}/android-sdk
        run: |
          set -e
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -fsSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"

          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-${ANDROID_API}" \
            "build-tools;34.0.0"

          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT"     >> $GITHUB_ENV

      # Host (desktop) Qt kit -> provides qt-cmake on PATH
      - name: Install Qt host ${ {env.QT_VERSION} }
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: desktop
          arch: gcc_64
          cache: true
          aqtversion: "==3.3.0"

      # Android kit (modules used by QGC)
      - name: Install Qt android ${ {env.QT_VERSION} }
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: android
          arch: android_arm64_v8a
          modules: qtserialport qtlocation qtpositioning qtsvg qtimageformats qtconnectivity qtshadertools qtquickcontrols2 qt5compat
          cache: true
          aqtversion: "==3.3.0"

      - name: Sanity check (qt-cmake & Qt dirs)
        run: |
          set -e
          echo "which qt-cmake => $(command -v qt-cmake || true)"
          qt-cmake --version
          echo "Qt6_DIR=${Qt6_DIR:-unset}"
          echo "QTDIR=${QTDIR:-unset}"
          # Print discovered Qt roots (install-qt-action exports $Qt6_DIR and adjusts PATH)
          ls -la "${Qt6_DIR%/lib/cmake/Qt6}/bin" || true

      - name: Configure (Android arm64-v8a)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
        run: |
          set -e
          # qt-cmake auto-picks Qt’s Android toolchain when SDK/NDK are present
          qt-cmake -S . -B "${BUILD_DIR}" -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DQT_ANDROID_ABIS=arm64-v8a \
            -DQT_ANDROID_BUILD_ALL_ABIS=OFF \
            -DANDROID_SDK_ROOT="${ANDROID_SDK_ROOT}" \
            -DANDROID_NDK_ROOT="${ANDROID_NDK_ROOT}"

      - name: Build (verbose)
        run: cmake --build "${BUILD_DIR}" --config Release -- -v

      - name: Package APK (best-effort)
        run: |
          cmake --build "${BUILD_DIR}" --target apk || true
          echo "Searching for APK/AAB…"
          find "${BUILD_DIR}" -name "*.apk" -print || true
          find "${BUILD_DIR}" -name "*.aab" -print || true

      - name: Upload APK/AAB
        uses: actions/upload-artifact@v4
        with:
          name: qgroundcontrol-android
          path: |
            ${BUILD_DIR}/**/*.apk
            ${BUILD_DIR}/**/*.aab
          if-no-files-found: warn