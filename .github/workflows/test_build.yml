name: Android Build (Qt 6.8.3, host-first)

on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      ANDROID_API: "34"
      BUILD_DIR: build-android
      QT_VERSION: "6.8.3"

    steps:
      - name: Identify this workflow
        run: |
          echo "This is .github/workflows/test_build.yml"
          echo "Run manually from Actions → this workflow → Run workflow (select branch: master)."

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept SDK licenses & install platforms
        run: |
          yes | sdkmanager --licenses || true
          sdkmanager "platform-tools" "platforms;android-${ANDROID_API}" "build-tools;34.0.0"

      - name: Setup Android NDK r27c
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c
          add-to-path: true

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      # ---------- Host Qt (install first - provides qt-cmake, rcc, etc.) ----------
      - name: Install Qt host (desktop gcc_64)
        id: qt_host
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: desktop
          arch: gcc_64
          cache: true
          modules: qtbase qttools qtdeclarative qtquickcontrols2 qtsvg qtserialport qtlocation qtpositioning qtimageformats qtconnectivity qtshadertools qt5compat

      - name: Capture Host Qt path
        run: echo "QT_HOST_PATH=${QTDIR}" >> $GITHUB_ENV

      - name: Verify qt-cmake exists and add to PATH (fail fast)
        run: |
          QT_CMAKE="${QT_HOST_PATH}/bin/qt-cmake"
          if [ -x "$QT_CMAKE" ]; then
            echo "Found qt-cmake at $QT_CMAKE"
          else
            CANDIDATES=(
              "/home/runner/Qt/${{ env.QT_VERSION }}/gcc_64/bin/qt-cmake"
              "/opt/hostedtoolcache/Qt/${{ env.QT_VERSION }}/gcc_64/bin/qt-cmake"
            )
            for c in "${CANDIDATES[@]}"; do
              if [ -x "$c" ]; then
                QT_CMAKE="$c"
                break
              fi
            done
          fi
          if [ -z "$QT_CMAKE" ]; then
            QT_CMAKE=$(find /home/runner /opt -type f -name qt-cmake -executable 2>/dev/null | head -n1 || true)
          fi
          if [ -z "$QT_CMAKE" ]; then
            echo "ERROR: qt-cmake not found after host Qt install. Diagnostic listings:"
            echo "Contents of QT_HOST_PATH (${QT_HOST_PATH}):"
            ls -al "${QT_HOST_PATH}" || true
            echo "/home/runner/Qt listing:"
            ls -al /home/runner/Qt || true
            echo "/opt/hostedtoolcache/Qt listing:"
            ls -al /opt/hostedtoolcache/Qt || true
            exit 1
          fi
          QT_BIN=$(dirname "$QT_CMAKE")
          echo "Adding $QT_BIN to PATH"
          echo "$QT_BIN" >> $GITHUB_PATH
          "$QT_CMAKE" --version || true

      # ---------- Qt for Android (install after host) ----------
      - name: Install Qt for Android (arm64-v8a)
        id: qt_android
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: android
          arch: android_arm64_v8a
          modules: qtserialport qtlocation qtpositioning qtimageformats qtconnectivity qtshadertools
          cache: true

      - name: Capture Android Qt path
        run: echo "ANDROID_QT_DIR=${QTDIR}" >> $GITHUB_ENV

      - name: Sanity check paths
        run: |
          echo "ANDROID_QT_DIR=${ANDROID_QT_DIR}"
          echo "QT_HOST_PATH=${QT_HOST_PATH}"
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}"
          echo "ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT}"
          echo "PATH=${PATH}"

      - name: Configure (qt-cmake)
        run: |
          if command -v qt-cmake >/dev/null 2>&1; then
            QT_CMAKE_BIN="qt-cmake"
          else
            QT_CMAKE_BIN="${QT_HOST_PATH}/bin/qt-cmake"
          fi
          echo "Using $QT_CMAKE_BIN for configure"
          "$QT_CMAKE_BIN" -S . -B "${BUILD_DIR}" -G Ninja \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DQT_ANDROID_SDK_ROOT="${ANDROID_SDK_ROOT}" \
            -DQT_ANDROID_NDK_ROOT="${ANDROID_NDK_ROOT}" \
            -DQT_HOST_PATH="${QT_HOST_PATH}" \
            -DCMAKE_PREFIX_PATH="${ANDROID_QT_DIR}" \
            -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build "${BUILD_DIR}" --config Release -j"$(nproc)"

      - name: Package (best-effort)
        run: |
          cmake --build "${BUILD_DIR}" --target apk || true
          cmake --build "${BUILD_DIR}" --target aab || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-output
          path: |
            ${BUILD_DIR}/**/*.apk
            ${BUILD_DIR}/**/*.aab
          if-no-files-found: warn
