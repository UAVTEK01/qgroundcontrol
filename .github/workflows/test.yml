name: Build QGroundControl Android

on:
  workflow_dispatch:

env:
  QT_VERSION: 6.6.3
  ANDROID_API: 33
  ANDROID_NDK_VERSION: 25.2.9519653
  BUILD_DIR: build-android
  QT_HOST_KIT: gcc_64
  QT_ANDROID_KIT: android_arm64_v8a
  QT_BASE_URL: https://download.qt.io

  # Toolchains
  JAVA_HOME: ${{ env.JAVA_HOME_17_X64 }}
  JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.16-8/x64

  # Predeclare paths used by the workflow
  ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
  ANDROID_HOME:     ${{ github.workspace }}/android-sdk
  NDK_ROOT:         ${{ github.workspace }}/android-sdk/ndk/25.2.9519653
  ANDROID_NDK_HOME: ${{ github.workspace }}/android-sdk/ndk/25.2.9519653

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install aqt + helpers
        run: |
          python -m pip install --upgrade pip
          pip install aqtinstall==3.3.0 jinja2 requests

      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Set up Android SDK + NDK
        shell: bash
        run: |
          set -e
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          cd "$ANDROID_SDK_ROOT"
          # Commandline tools
          curl -fsSLo cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip
          mkdir -p cmdline-tools/latest
          unzip -q cmdline-tools.zip -d cmdline-tools/latest
          rm -f cmdline-tools.zip
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses

          # Platforms & build-tools & NDK
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platforms;android-${ANDROID_API}" \
            "build-tools;34.0.0" \
            "platform-tools" \
            "cmake;3.22.1" \
            "ndk;${ANDROID_NDK_VERSION}"

      - name: Cache Qt (host + android)
        uses: actions/cache@v4
        with:
          path: |
            ~/Qt
          key: qt-${{ runner.os }}-${{ env.QT_VERSION }}-${{ env.QT_HOST_KIT }}-${{ env.QT_ANDROID_KIT }}

      - name: Install Qt (host + Android)
        shell: bash
        env:
          QT_VERSION: ${{ env.QT_VERSION }}
          QT_HOST_KIT: ${{ env.QT_HOST_KIT }}
          QT_ANDROID_KIT: ${{ env.QT_ANDROID_KIT }}
        run: |
          set -e
          mkdir -p "$HOME/Qt"

          # Host Qt (desktop)
          aqt install-qt linux desktop "${QT_VERSION}" "${QT_HOST_KIT}" --outputdir "$HOME/Qt"

          # Android Qt â€” ONLY CHANGE: no '-m ...' module list (fix for aqt error)
          aqt install-qt linux android "${QT_VERSION}" "${QT_ANDROID_KIT}" --outputdir "$HOME/Qt"

          echo "QT_HOST_PATH=$HOME/Qt/${QT_VERSION}/${QT_HOST_KIT}" >> $GITHUB_ENV
          echo "QT_ANDROID_PATH=$HOME/Qt/${QT_VERSION}/${QT_ANDROID_KIT}" >> $GITHUB_ENV

          # Quick sanity checks
          test -x "$HOME/Qt/${QT_VERSION}/${QT_HOST_KIT}/bin/qmake" && echo "Host qmake OK"
          test -d "$HOME/Qt/${QT_VERSION}/${QT_ANDROID_KIT}" && echo "Android kit OK"

      - name: Configure (CMake)
        shell: bash
        env:
          ANDROID_NDK: ${{ env.NDK_ROOT }}
        run: |
          set -e
          mkdir -p "${BUILD_DIR}"
          cmake -S . -B "${BUILD_DIR}" -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE="${NDK_ROOT}/build/cmake/android.toolchain.cmake" \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DQT_HOST_PATH="${QT_HOST_PATH}" \
            -DANDROID_SDK_ROOT="${ANDROID_SDK_ROOT}" \
            -DANDROID_NDK="${NDK_ROOT}"

      - name: Build (APK)
        shell: bash
        run: |
          set -e
          cmake --build "${BUILD_DIR}" --target apk -j $(nproc)

      - name: Collect APK
        shell: bash
        run: |
          set -e
          mkdir -p artifacts
          find "${BUILD_DIR}" -type f -name "*.apk" -print -exec cp -v {} artifacts/ \;

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: QGroundControl-android-${{ github.sha }}
          path: artifacts/*.apk
          if-no-files-found: error