# Self-contained Android build workflow with resilient Qt install
# - Triggers: manual + push/pull_request on main
# - Installs Java, Android SDK/NDK, Qt via aqtinstall (auto-selects a compatible 6.8.x)
# - Uses host-first approach: install host Qt (qt-cmake) then Android Qt, configure with qt-cmake, build with CMake/Ninja
# - Includes diagnostics and improved TLS/cert handling for aqt
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: read

env:
  JAVA_VERSION: "17"
  ANDROID_API: "34"
  BUILD_DIR: build-android
  QT_MINOR_SERIES: "6.8"           # prefer the 6.8.x series; the workflow will auto-pick the highest available patch
  QT_HOST_ARCH: "gcc_64"
  QT_ANDROID_ARCH: "android_arm64_v8a"
  QT_MODULES_HOST: "qtwebengine qtpdf"     # minimal host modules; add more if required
  QT_MODULES_ANDROID: "qtwebengine qtpdf"  # minimal Android modules; add more if required
  ANDROID_NDK_VERSION: "r27c"
  ANDROID_WORKDIR: "."                     # change if project lives in subdir
  ANDROID_SDK_ROOT: ${{ runner.temp }}/android-sdk
  GRADLEW_PATH: "./gradlew"
  GRADLE_TASK: "assembleDebug"
  BUILD_TIMEOUT_MINUTES: 180

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: ${{ env.BUILD_TIMEOUT_MINUTES }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip wget zip python3-pip ca-certificates ninja-build pkg-config curl

      - name: Install Android SDK command-line tools + SDK components
        shell: bash
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -euo pipefail
          echo "Android SDK root: ${ANDROID_SDK_ROOT}"
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
          cd /tmp
          CLI_ZIP="commandlinetools-linux-latest.zip"
          if [ ! -f "${CLI_ZIP}" ]; then
            wget -q -O "${CLI_ZIP}" "https://dl.google.com/android/repository/commandlinetools-linux-latest.zip"
          fi
          unzip -q -o "${CLI_ZIP}" -d "${ANDROID_SDK_ROOT}/cmdline-tools"
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
          if [ -d "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools" ]; then
            mv "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools/"* "${ANDROID_SDK_ROOT}/cmdline-tools/latest/" || true
          fi
          export PATH="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
          yes | sdkmanager --licenses || true
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" "platform-tools" "platforms;android-${ANDROID_API}" "build-tools;34.0.0" "ndk;${ANDROID_NDK_VERSION}"
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" --list_installed || true

      - name: Export Android SDK/NDK env
        run: |
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
          NDK_PATH="${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}"
          echo "ANDROID_NDK_ROOT=${NDK_PATH}" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=${NDK_PATH}" >> $GITHUB_ENV
          echo "PATH=${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${PATH}" >> $GITHUB_ENV

      - name: Cache Gradle and SDK
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ env.ANDROID_SDK_ROOT }}
          key: ${{ runner.os }}-build-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-sdk-${{ env.ANDROID_API }}-ndk-${{ env.ANDROID_NDK_VERSION }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Prepare Python & certs for aqtinstall
        run: |
          python3 -m pip install --upgrade pip certifi || true
          sudo update-ca-certificates || true

      - name: Install aqtinstall (for Qt downloads)
        run: |
          python3 -m pip install --upgrade aqtinstall || true
          python3 -m aqt --version || true

      # ---------- Host Qt: auto-pick best 6.8.x and install ----------
      - name: Install Qt host (auto-pick ${QT_MINOR_SERIES}.x)
        id: qt_host
        run: |
          set -euo pipefail
          OUTPUT_DIR="$HOME/Qt"
          mkdir -p "$OUTPUT_DIR"
          LOG="/tmp/aqt_list.log"

          echo "Listing available Qt releases (for ${QT_MINOR_SERIES}.x series)..."
          # Save list output (verbose) so we can parse it
          python3 -m aqt list-qt linux desktop --outputdir /tmp --verbose > "$LOG" 2>&1 || true
          echo "Saved aqt list to $LOG"

          # Find the highest patch for the minor series (e.g., 6.8.x)
          BEST=$(grep -oP "${QT_MINOR_SERIES}\.\d+" "$LOG" | sort -V | tail -n1 || true)
          if [ -z "$BEST" ]; then
            echo "No ${QT_MINOR_SERIES}.x release found in aqt list. Dumping aqt list:"
            sed -n '1,200p' "$LOG" || true
            echo "Failing step so you can inspect what aqt sees."
            exit 1
          fi
          echo "Auto-selected Qt version: $BEST"

          DESIRED="${QT_MODULES_HOST}"
          echo "Attempting to install Qt host ${BEST} (${QT_HOST_ARCH}) with modules: ${DESIRED}"
          if python3 -m aqt install-qt linux desktop "${BEST}" ${QT_HOST_ARCH} --outputdir "$OUTPUT_DIR" --modules $DESIRED --autodesktop; then
            echo "Host Qt ${BEST} installed with modules"
          else
            echo "Full host install failed; trying base host install for ${BEST}"
            python3 -m aqt install-qt linux desktop "${BEST}" ${QT_HOST_ARCH} --outputdir "$OUTPUT_DIR" --autodesktop
          fi

          QT_HOST_PATH="${OUTPUT_DIR}/${BEST}/${QT_HOST_ARCH}"
          echo "QT_HOST_PATH=${QT_HOST_PATH}" >> $GITHUB_ENV
          echo "Installed host Qt into: ${QT_HOST_PATH}"
          ls -la "${QT_HOST_PATH}" || true
          # expose the chosen version for later
          echo "QT_CHOOSEN_VERSION=${BEST}" >> $GITHUB_ENV

      - name: Add host Qt bin to PATH and validate qt-cmake
        run: |
          if [ -z "${QT_HOST_PATH:-}" ]; then
            echo "QT_HOST_PATH not set; aborting"
            exit 1
          fi
          QT_CMAKE="${QT_HOST_PATH}/bin/qt-cmake"
          if [ ! -x "$QT_CMAKE" ]; then
            echo "qt-cmake not present at $QT_CMAKE - searching common locations..."
            QT_CMAKE=$(find /home/runner /opt -type f -name qt-cmake -executable 2>/dev/null | head -n1 || true)
          fi
          if [ -z "$QT_CMAKE" ]; then
            echo "ERROR: qt-cmake not found. Listing QT_HOST_PATH contents for debugging:"
            ls -la "${QT_HOST_PATH}" || true
            exit 1
          fi
          QT_BIN=$(dirname "$QT_CMAKE")
          echo "Adding $QT_BIN to PATH"
          echo "$QT_BIN" >> $GITHUB_PATH
          echo "qt-cmake: $QT_CMAKE"
          "$QT_CMAKE" --version || true

      # ---------- Qt for Android (use chosen host version) ----------
      - name: Install Qt for Android (android_arm64_v8a)
        id: qt_android
        run: |
          set -euo pipefail
          OUTPUT_DIR="$HOME/Qt"
          mkdir -p "$OUTPUT_DIR"
          BEST="${QT_CHOOSEN_VERSION:-${QT_MINOR_SERIES}.0}"
          DESIRED="${QT_MODULES_ANDROID}"
          echo "Installing Qt ${BEST} for Android (${QT_ANDROID_ARCH}) with modules: ${DESIRED}"
          if python3 -m aqt install-qt linux android "${BEST}" ${QT_ANDROID_ARCH} --outputdir "$OUTPUT_DIR" --modules $DESIRED --autodesktop; then
            echo "Android Qt ${BEST} with modules installed"
          else
            echo "Full Android Qt install failed; trying base install for ${BEST}"
            python3 -m aqt install-qt linux android "${BEST}" ${QT_ANDROID_ARCH} --outputdir "$OUTPUT_DIR" --autodesktop
          fi
          ANDROID_QT_DIR="${OUTPUT_DIR}/${BEST}/${QT_ANDROID_ARCH}"
          echo "ANDROID_QT_DIR=${ANDROID_QT_DIR}" >> $GITHUB_ENV
          ls -la "${ANDROID_QT_DIR}" || true

      - name: Sanity print env
        run: |
          echo "QT_HOST_PATH=${QT_HOST_PATH}"
          echo "ANDROID_QT_DIR=${ANDROID_QT_DIR}"
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}"
          echo "ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT}"
          echo "PATH=${PATH}"

      - name: Configure (qt-cmake)
        run: |
          set -euo pipefail
          QT_CMAKE_BIN="${QT_HOST_PATH}/bin/qt-cmake"
          if [ ! -x "${QT_CMAKE_BIN}" ]; then
            echo "ERROR: qt-cmake not found at ${QT_CMAKE_BIN}"
            ls -la "${QT_HOST_PATH}/bin" || true
            exit 1
          fi
          echo "Running qt-cmake configure"
          mkdir -p "${BUILD_DIR}"
          "${QT_CMAKE_BIN}" -S "${ANDROID_WORKDIR}" -B "${BUILD_DIR}" -G Ninja \
            -DCMAKE_PREFIX_PATH="${ANDROID_QT_DIR}" \
            -DQT_HOST_PATH="${QT_HOST_PATH}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DQT_ANDROID_ABIS=arm64-v8a \
            -DQT_ANDROID_BUILD_ALL_ABIS=OFF \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DANDROID_SDK_ROOT="${ANDROID_SDK_ROOT}" \
            -DANDROID_NDK_ROOT="${ANDROID_NDK_ROOT}"

      - name: Build
        run: cmake --build "${BUILD_DIR}" --config Release --parallel

      - name: Package APK/AAB (optional targets)
        continue-on-error: true
        run: |
          echo "Attempting to build package targets (apk/aab) if present"
          cmake --build "${BUILD_DIR}" --target apk 2>&1 | tee /tmp/apk-build.log || echo "apk target missing/failed"
          cmake --build "${BUILD_DIR}" --target aab 2>&1 | tee /tmp/aab-build.log || echo "aab target missing/failed"
          echo "Artifacts under ${BUILD_DIR}:"
          find "${BUILD_DIR}" -type f \( -name "*.apk" -o -name "*.aab" \) -print || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-output
          path: |
            ${{ env.BUILD_DIR }}/**/*.apk
            ${{ env.BUILD_DIR }}/**/*.aab
            ${{ env.BUILD_DIR }}/android-build/**/outputs/**/*.apk
            ${{ env.BUILD_DIR }}/android-build/**/outputs/**/*.aab
          if-no-files-found: warn
