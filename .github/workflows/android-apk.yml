name: Android APK (manual)

on:
  workflow_dispatch:
    inputs:
      ref:
        description: "Branch or tag to build (e.g. master, feat/stabilizer, v4.5.10)"
        required: true
        default: "master"
      abis:
        description: "Android ABIs"
        required: true
        default: "arm64-v8a"
      qt_version:
        description: "Qt version"
        required: true
        default: "5.15.2"
      ndk_version:
        description: "Android NDK version"
        required: true
        default: "21.3.6528147"
      sdk_platform:
        description: "Android SDK platform"
        required: true
        default: "android-30"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  build-android:
    runs-on: ubuntu-22.04

    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/Android

    steps:
      - name: Checkout (with submodules) at ref
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref_name || github.event.repository.default_branch }}
          submodules: recursive
          fetch-depth: 0

      # 1) Java 17 BEFORE Android SDK so sdkmanager works
      - name: Set up Java 17 (for sdkmanager)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: ${{ env.ANDROID_SDK_ROOT }}
          key: ${{ runner.os }}-android-${{ inputs.sdk_platform }}-ndk-${{ inputs.ndk_version }}
          restore-keys: |
            ${{ runner.os }}-android-

      - name: Install Android cmdline-tools
        uses: android-actions/setup-android@v3

      - name: Install SDK components + accept licenses (robust)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          export PATH="$JAVA_HOME/bin:$PATH"
          mkdir -p "$ANDROID_SDK_ROOT"

          sdkmanager --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;${{ inputs.sdk_platform }}" \
            "build-tools;30.0.3" \
            "ndk;${{ inputs.ndk_version }}" \
            "cmdline-tools;latest"

          # Avoid failing the step when 'yes' gets SIGPIPE after sdkmanager exits.
          set +o pipefail
          yes 2>/dev/null | sdkmanager --sdk_root="$ANDROID_SDK_ROOT" --licenses >/dev/null || true
          set -o pipefail

      # 2) Switch to Java 11 for Qt5/Gradle compatibility
      - name: Switch to Java 11 (for Qt5/Gradle)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"
          cache: gradle

      # 3) Install Qt 5.x (Android target) â€” qmake flow
      - name: Install Qt (with Android)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ inputs.qt_version }}
          host: linux
          target: android
          arch: android_${{ inputs.abis }}     # e.g. android_arm64-v8a
          cache: true
          setup-qmake: true                    # <- puts qmake on PATH
          # modules: qtimageformats

      # Verify qmake and fall back to discovery if needed
      - name: Ensure qmake is available
        run: |
          set -e
          echo "Checking qmake on PATH..."
          if command -v qmake >/dev/null 2>&1; then
            echo "QMAKE=$(command -v qmake)" >> "$GITHUB_ENV"
            echo "Found qmake on PATH: $(command -v qmake)"
            qmake -query || true
            exit 0
          fi

          echo "qmake not on PATH. Attempting discovery..."
          SEARCH_DIRS=(
            "$RUNNER_TEMP/Qt"
            "$RUNNER_WORKSPACE/Qt"
            "$HOME/Qt"
            "/opt/hostedtoolcache"
            "$RUNNER_TEMP"
          )
          FOUND=""
          for D in "${SEARCH_DIRS[@]}"; do
            [ -d "$D" ] || continue
            FOUND=$(find "$D" -maxdepth 8 -type f -name qmake 2>/dev/null | head -n 1 || true)
            [ -n "$FOUND" ] && break
          done

          if [ -z "$FOUND" ]; then
            echo "ERROR: qmake not found after install." >&2
            echo "Searched: ${SEARCH_DIRS[*]}"
            exit 1
          fi

          echo "Found qmake at: $FOUND"
          echo "QMAKE=$FOUND" >> "$GITHUB_ENV"
          "$FOUND" -query || true

      # 4) Configure & Build via qmake/make
      - name: Configure (qmake)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          mkdir -p build-android
          pushd build-android
          "${QMAKE:-qmake}" -r ../qgroundcontrol.pro -spec android-clang \
            CONFIG+=release ANDROID_ABIS="${{ inputs.abis }}"
          popd

      - name: Build
        run: |
          pushd build-android
          make -j"$(nproc)"
          popd

      # 5) Package APK via Gradle
      - name: Package APK (assembleRelease)
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          export PATH="$JAVA_HOME/bin:$PATH"   # Ensure Java 11 on PATH for Gradle
          pushd build-android/android-build
          ./gradlew --no-daemon --warning-mode=all assembleRelease
          popd

      # 6) Upload artifact(s)
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: qgc-apk-${{ github.event.inputs.ref || github.ref_name }}
          path: build-android/android-build/app/build/outputs/apk/release/*.apk
