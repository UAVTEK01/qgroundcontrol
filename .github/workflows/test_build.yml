name: Android APK (clean)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      QT_VERSION: "6.8.3"
      ANDROID_API: "34"
      BUILD_DIR: build-android

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Base tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build unzip zip curl

      - name: Android NDK r27c
        id: ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c

      - name: Export NDK env
        run: |
          echo "ANDROID_NDK_HOME=${{ steps.ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=${{ steps.ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "NDK_ROOT=${{ steps.ndk.outputs.ndk-path }}" >> $GITHUB_ENV

      - name: Android SDK (cmdline-tools + platform/build-tools)
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
          ANDROID_HOME:     ${{ github.workspace }}/android-sdk
        run: |
          set -e
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -fsSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" "platforms;android-${ANDROID_API}" "build-tools;34.0.0"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_SDK_ROOT"     >> $GITHUB_ENV

      # Qt host kit (gcc_64) — pin aqt version and use a reliable mirror
      - uses: jurplel/install-qt-action@v4
        with:
          version:    "6.8.3"
          host:       linux
          target:     desktop
          arch:       gcc_64
          aqtversion: "==3.2.2"                     # stable with Qt 6.8.x feeds
          mirror:     "https://mirrors.ocf.berkeley.edu/qt/"
          cache:      true
          # Work around the 'qt_base' XML glitch by asking explicitly for qtbase archive
          archives:   "qtbase"

      # Qt Android kit (arm64) — same pins/mirror
      - uses: jurplel/install-qt-action@v4
        with:
          version:    "6.8.3"
          host:       linux
          target:     android
          arch:       android_arm64_v8a
          aqtversion: "==3.2.2"
          mirror:     "https://mirrors.ocf.berkeley.edu/qt/"
          cache:      true
          modules:    "qtserialport qtlocation qtpositioning qtsvg qtimageformats qtconnectivity qtshadertools qtquickcontrols2 qt5compat"
          archives:   "qtbase"

      - name: Sanity
        run: |
          command -v qt-cmake
          qt-cmake --version
          ninja --version

      - name: Configure
        run: |
          qt-cmake -S . -B "${BUILD_DIR}" -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DQT_ANDROID_ABIS=arm64-v8a \
            -DQT_ANDROID_BUILD_ALL_ABIS=OFF \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DANDROID_SDK_ROOT="${ANDROID_SDK_ROOT}" \
            -DANDROID_NDK_ROOT="${ANDROID_NDK_ROOT}"

      - name: Build
        run: cmake --build "${BUILD_DIR}" --config Release -- -v

      - name: Package
        run: |
          cmake --build "${BUILD_DIR}" --target apk || true
          find "${BUILD_DIR}" -name "*.apk" -print || true
          find "${BUILD_DIR}" -name "*.aab" -print || true

      - uses: actions/upload-artifact@v4
        with:
          name: qgroundcontrol-android
          path: |
            ${BUILD_DIR}/**/*.apk
            ${BUILD_DIR}/**/*.aab
          if-no-files-found: warn