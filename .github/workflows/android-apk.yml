name: Android Build (Qt 6.8.x host-first)

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch: {}

permissions:
  contents: read

env:
  JAVA_VERSION: "17"
  ANDROID_API: "34"
  BUILD_DIR: build-android
  QT_VERSION: "6.8.3"
  QT_HOST_ARCH: "gcc_64"
  QT_ANDROID_ARCH: "android_arm64_v8a"
  ANDROID_NDK_VERSION: "r27c"
  ANDROID_WORKDIR: "."                     # change if project lives in subdir
  ANDROID_SDK_ROOT: ${{ runner.temp }}/android-sdk
  GRADLEW_PATH: "./gradlew"
  GRADLE_TASK: "assembleDebug"

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180

    steps:
      - name: Identify this workflow
        run: |
          echo "Workflow name: Android Build (Qt 6.8.x host-first)"
          echo "File path: .github/workflows/android-build.yml"
          echo "Branch: ${GITHUB_REF:-<unknown>}"

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip wget zip python3-pip ca-certificates ninja-build pkg-config curl jq

      # Install Android SDK components
      - name: Install Android SDK command-line tools and packages
        shell: bash
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -euo pipefail
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
          cd /tmp
          CLI_ZIP="commandlinetools-linux-latest.zip"
          wget -q -O "${CLI_ZIP}" "https://dl.google.com/android/repository/commandlinetools-linux-latest.zip"
          unzip -q -o "${CLI_ZIP}" -d "${ANDROID_SDK_ROOT}/cmdline-tools"
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
          if [ -d "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools" ]; then
            mv "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools/"* "${ANDROID_SDK_ROOT}/cmdline-tools/latest/" || true
          fi
          export PATH="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
          yes | sdkmanager --licenses || true
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" "platform-tools" "platforms;android-${ANDROID_API}" "build-tools;34.0.0" || true
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" --list_installed || true

      - name: Install Android NDK (via sdkmanager)
        shell: bash
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -euo pipefail
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" "ndk;${ANDROID_NDK_VERSION}" || true
          ls -la "${ANDROID_SDK_ROOT}/ndk" || true

      - name: Export Android SDK/NDK env
        run: |
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
          NDK_PATH="${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}"
          if [ ! -d "${NDK_PATH}" ]; then
            FIRST=$(ls -1 "${ANDROID_SDK_ROOT}/ndk" 2>/dev/null | head -n1 || true)
            if [ -n "$FIRST" ]; then
              NDK_PATH="${ANDROID_SDK_ROOT}/ndk/${FIRST}"
            fi
          fi
          echo "ANDROID_NDK_ROOT=${NDK_PATH}" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=${NDK_PATH}" >> $GITHUB_ENV
          echo "PATH=${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${PATH}" >> $GITHUB_ENV

      - name: Accept SDK licenses & show installed packages (debug)
        run: |
          yes | sdkmanager --licenses || true
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" --list_installed || true

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      # Qt install (host-first)
      - name: Prepare Python & certs for aqtinstall
        run: |
          python3 -m pip install --upgrade pip certifi || true
          sudo update-ca-certificates || true

      - name: Install aqtinstall
        run: |
          python3 -m pip install --upgrade aqtinstall || true
          python3 -m aqt --version || true

      - name: Install Qt host (desktop gcc_64)
        id: qt_host
        run: |
          set -euo pipefail
          OUTPUT_DIR="$HOME/Qt"
          mkdir -p "$OUTPUT_DIR"
          DESIRED="qtwebengine qtpdf"  # minimal host modules; expand if required
          if python3 -m aqt install-qt linux desktop ${QT_VERSION} ${QT_HOST_ARCH} --outputdir "$OUTPUT_DIR" --modules $DESIRED --autodesktop; then
            echo "host installed with modules"
          else
            echo "fallback to base host install"
            python3 -m aqt install-qt linux desktop ${QT_VERSION} ${QT_HOST_ARCH} --outputdir "$OUTPUT_DIR" --autodesktop || true
          fi
          QT_HOST_PATH="${OUTPUT_DIR}/${QT_VERSION}/${QT_HOST_ARCH}"
          if [ ! -d "${QT_HOST_PATH}" ]; then
            ALT=$(ls -1 "${OUTPUT_DIR}" | grep '^6\.' | tail -n1 || true)
            QT_HOST_PATH="${OUTPUT_DIR}/${ALT}/${QT_HOST_ARCH}"
          fi
          echo "QT_HOST_PATH=${QT_HOST_PATH}" >> $GITHUB_ENV
          ls -la "${QT_HOST_PATH}" || true

      - name: Add host Qt bin to PATH and validate qt-cmake
        run: |
          QT_CMAKE="${QT_HOST_PATH}/bin/qt-cmake"
          if [ ! -x "$QT_CMAKE" ]; then
            QT_CMAKE=$(find /home/runner /opt -type f -name qt-cmake -executable 2>/dev/null | head -n1 || true)
          fi
          if [ -z "$QT_CMAKE" ]; then
            echo "ERROR: qt-cmake not found in host Qt install"
            ls -la "${QT_HOST_PATH}" || true
            exit 1
          fi
          echo "$(dirname "$QT_CMAKE")" >> $GITHUB_PATH
          "$QT_CMAKE" --version || true

      - name: Install Qt for Android (android_arm64_v8a)
        id: qt_android
        run: |
          set -euo pipefail
          OUTPUT_DIR="$HOME/Qt"
          mkdir -p "$OUTPUT_DIR"
          DESIRED_ANDROID="qtwebengine qtpdf"  # minimal android modules; expand if required
          if python3 -m aqt install-qt linux android ${QT_VERSION} ${QT_ANDROID_ARCH} --outputdir "$OUTPUT_DIR" --modules $DESIRED_ANDROID --autodesktop; then
            echo "android qt installed with modules"
          else
            echo "fallback android qt base install"
            python3 -m aqt install-qt linux android ${QT_VERSION} ${QT_ANDROID_ARCH} --outputdir "$OUTPUT_DIR" --autodesktop || true
          fi
          ANDROID_QT_DIR="${OUTPUT_DIR}/${QT_VERSION}/${QT_ANDROID_ARCH}"
          if [ ! -d "${ANDROID_QT_DIR}" ]; then
            ALT=$(ls -1 "${OUTPUT_DIR}" | grep '^6\.' | tail -n1 || true)
            ANDROID_QT_DIR="${OUTPUT_DIR}/${ALT}/${QT_ANDROID_ARCH}"
          fi
          echo "ANDROID_QT_DIR=${ANDROID_QT_DIR}" >> $GITHUB_ENV
          ls -la "${ANDROID_QT_DIR}" || true

      - name: Configure (qt-cmake)
        run: |
          QT_CMAKE_BIN="${QT_HOST_PATH}/bin/qt-cmake"
          if [ ! -x "${QT_CMAKE_BIN}" ]; then
            echo "ERROR: qt-cmake not found at ${QT_CMAKE_BIN}"
            ls -la "${QT_HOST_PATH}/bin" || true
            exit 1
          fi
          mkdir -p "${BUILD_DIR}"
          "${QT_CMAKE_BIN}" -S "${ANDROID_WORKDIR}" -B "${BUILD_DIR}" -G Ninja \
            -DCMAKE_PREFIX_PATH="${ANDROID_QT_DIR}" \
            -DQT_HOST_PATH="${QT_HOST_PATH}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DQT_ANDROID_ABIS=arm64-v8a \
            -DQT_ANDROID_BUILD_ALL_ABIS=OFF \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DANDROID_SDK_ROOT="${ANDROID_SDK_ROOT}" \
            -DANDROID_NDK_ROOT="${ANDROID_NDK_ROOT}"

      - name: Build
        run: cmake --build "${BUILD_DIR}" --config Release --parallel

      - name: Package APK/AAB (optional targets)
        continue-on-error: true
        run: |
          cmake --build "${BUILD_DIR}" --target apk || true
          cmake --build "${BUILD_DIR}" --target aab || true
          find "${BUILD_DIR}" -name "*.apk" -o -name "*.aab" -print || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-output
          path: |
            ${{ env.BUILD_DIR }}/**/*.apk
            ${{ env.BUILD_DIR }}/**/*.aab
          if-no-files-found: warn
