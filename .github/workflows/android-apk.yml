# Self-contained GitHub Actions workflow to build an Android APK without third-party actions
# - Installs JDK (setup-java action)
# - Installs Android command-line tools + SDK, build-tools and NDK via sdkmanager
# - Installs Qt via python aqtinstall (if your build requires Qt)
# - Runs gradle assembleDebug in the android working directory and uploads produced APK(s)
#
# NOTE:
# - Adjust QT_VERSION, ANDROID_API_LEVEL, ANDROID_NDK_VERSION, BUILD_TOOLS_VERSION and ANDROID_WORKDIR to match your project.
# - This workflow may be slower the first run since it downloads SDK/NDK and Qt. Use a self-hosted runner or Docker image for faster repeated runs.

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  JAVA_VERSION: "11"
  ANDROID_API_LEVEL: "30"
  BUILD_TOOLS_VERSION: "30.0.3"
  ANDROID_NDK_VERSION: "21.3.6528147"
  ANDROID_WORKDIR: "android"    # change if your gradle project is in a subdir
  GRADLEW_PATH: "./gradlew"
  GRADLE_TASK: "assembleDebug"
  QT_VERSION: "6.8.3"           # set if you need Qt; otherwise step will install and can be skipped
  QT_ARCH: "gcc_64"
  QT_MODULES: "qtwebengine qtpdf" # adjust to your needs
  ANDROID_SDK_ROOT: ${{ runner.temp }}/android-sdk

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip wget zip python3-pip ca-certificates

      - name: Install Android command line tools and SDK components
        shell: bash
        run: |
          set -euo pipefail
          export ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
          cd /tmp
          # Download latest command line tools (the filename/version may change over time)
          CLI_ZIP="commandlinetools-linux-8512546_latest.zip"
          if [ ! -f "${CLI_ZIP}" ]; then
            wget -q "https://dl.google.com/android/repository/${CLI_ZIP}"
          fi
          unzip -q -o "${CLI_ZIP}" -d "${ANDROID_SDK_ROOT}/cmdline-tools"
          # Move to a 'latest' folder expected by sdkmanager
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
          mv "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools/"* "${ANDROID_SDK_ROOT}/cmdline-tools/latest/" || true
          export PATH="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
          echo "Android SDK root: ${ANDROID_SDK_ROOT}"
          yes | sdkmanager --licenses || true
          # Install platform tools, build tools, platform, and NDK
          sdkmanager "platform-tools" "platforms;android-${ANDROID_API_LEVEL}" "build-tools;${BUILD_TOOLS_VERSION}" "ndk;${ANDROID_NDK_VERSION}"
          # Show installed
          sdkmanager --list_installed || true
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}

      - name: Export Android NDK path
        shell: bash
        run: |
          export ANDROID_NDK_HOME="${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}"
          echo "ANDROID_NDK_HOME=${ANDROID_NDK_HOME}" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
          echo "PATH=${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${PATH}" >> $GITHUB_ENV

      - name: Cache Gradle and Android SDK (partial)
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ${{ env.ANDROID_SDK_ROOT }}
          key: ${{ runner.os }}-build-${{ hashFiles('**/gradle/wrapper/gradle-wrapper.properties') }}-${{ env.GRADLE_TASK }}-${{ env.ANDROID_API_LEVEL }}-${{ env.ANDROID_NDK_VERSION }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Install Python aqtinstall and (optionally) Qt
        shell: bash
        run: |
          set -e
          python3 -m pip install --upgrade pip
          python3 -m pip install --upgrade aqtinstall
          # Diagnostic: list available Qt releases (useful if aqt can't find 'qt_base')
          echo "=== aqt: list-qt (diagnostic) ==="
          python3 -m aqt list-qt linux desktop --arch "${QT_ARCH}" --outputdir /tmp || true
          # Try to install Qt only if QT_VERSION isn't empty
          if [ -n "${QT_VERSION}" ]; then
            echo "Installing Qt ${QT_VERSION} ${QT_ARCH}..."
            python3 -m aqt install-qt linux desktop "${QT_VERSION}" "${QT_ARCH}" --outputdir "${HOME}/Qt" --modules ${QT_MODULES} --autodesktop || true
            echo "Qt install step finished (check logs)."
          else
            echo "QT_VERSION empty, skipping Qt install."
          fi

      - name: Make gradlew executable
        if: runner.os != 'Windows'
        run: |
          chmod +x ${{ env.GRADLEW_PATH }} || true

      - name: Build APK with Gradle
        working-directory: ${{ env.ANDROID_WORKDIR }}
        shell: bash
        env:
          JAVA_HOME: ${{ steps.setup-java.outputs.java-home || env.JAVA_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_SDK_ROOT }}/ndk/${{ env.ANDROID_NDK_VERSION }}
        run: |
          set -euo pipefail
          echo "Running: ${{ env.GRADLEW_PATH }} ${{ env.GRADLE_TASK }}"
          # Ensure executable bits and run with stacktrace
          chmod +x ${{ env.GRADLEW_PATH }} || true
          ${{ env.GRADLEW_PATH }} ${{ env.GRADLE_TASK }} --no-daemon --stacktrace

      - name: Find APKs
        id: find_apks
        run: |
          set -e
          echo "Searching for APK files..."
          find . -type f -name "*.apk" -print > apks_found.txt || true
          if [ -s apks_found.txt ]; then
            echo "apks<<EOF" >> $GITHUB_OUTPUT
            cat apks_found.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            cat apks_found.txt
          else
            echo "No APK found."
            echo "apks<<EOF" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Upload APK artifact(s)
        if: steps.find_apks.outputs.apks != ''
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: |
            $(cat apks_found.txt | tr '\n' '\0' | xargs -0 -I{} echo {})
          retention-days: 7

      - name: Fail if no APK produced
        if: steps.find_apks.outputs.apks == ''
        run: |
          echo "No APK found after build. Check the logs for failures (Qt/Gradle/sdks)."
          exit 1
