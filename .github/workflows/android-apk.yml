name: Android APK (Qt 6.8.3, arm64-v8a)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:

jobs:
  build-android:
    runs-on: ubuntu-22.04

    env:
      # Versions
      QT_VERSION: "6.8.3"
      ANDROID_API: "34"
      ANDROID_NDK_VERSION: "26.3.11579264"   # r26c (Qt 6.8.x compatible)
      # Paths
      ANDROID_SDK_ROOT: "${{ github.workspace }}/android-sdk"
      ANDROID_HOME: "${{ github.workspace }}/android-sdk"
      NDK_ROOT: "${{ github.workspace }}/android-sdk/ndk/26.3.11579264"
      BUILD_DIR: build-android
      # Qt target kit
      QT_HOST_KIT: "gcc_64"
      QT_ANDROID_KIT: "android_arm64_v8a"
      # Output toggles
      MAKE_AAB: "OFF"   # set to ON if you want .aab too

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build python3-pip unzip zip
          python3 -m pip install --upgrade aqtinstall==3.1.7

      - name: Install Android SDK + NDK
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -fsSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses
          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-${ANDROID_API}" \
            "build-tools;34.0.0" \
            "ndk;${ANDROID_NDK_VERSION}"

      - name: Install Qt (host + Android kits)
        run: |
          mkdir -p $HOME/Qt
          aqt install-qt linux desktop ${QT_VERSION} ${QT_HOST_KIT} --outputdir $HOME/Qt
          aqt install-qt linux android ${QT_VERSION} ${QT_ANDROID_KIT} --outputdir $HOME/Qt
          aqt install-tool linux desktop ${QT_VERSION} qttools --outputdir $HOME/Qt
        # Result:
        #   $HOME/Qt/${QT_VERSION}/gcc_64
        #   $HOME/Qt/${QT_VERSION}/android_arm64_v8a

      - name: Print env & key paths (diagnostics)
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          echo "NDK_ROOT=$NDK_ROOT"
          echo "Qt host: $HOME/Qt/${QT_VERSION}/${QT_HOST_KIT}"
          echo "Qt android: $HOME/Qt/${QT_VERSION}/${QT_ANDROID_KIT}"
          which cmake || true
          cmake --version || true
          ninja --version || true
          ls -la "$HOME/Qt/${QT_VERSION}" || true
          find "$HOME/Qt/${QT_VERSION}" -maxdepth 2 -type d -name "android_*" -print || true

      - name: Configure CMake (Android arm64-v8a)
        env:
          QT_HOST_PATH: "$HOME/Qt/${{ env.QT_VERSION }}/${{ env.QT_HOST_KIT }}"
          QT_ANDROID_PATH: "$HOME/Qt/${{ env.QT_VERSION }}/${{ env.QT_ANDROID_KIT }}"
        run: |
          cmake -S . -B "${BUILD_DIR}" -G Ninja \
            -D CMAKE_BUILD_TYPE=Release \
            -D ANDROID=ON \
            -D ANDROID_ABI=arm64-v8a \
            -D ANDROID_PLATFORM=android-${ANDROID_API} \
            -D ANDROID_SDK_ROOT="${ANDROID_SDK_ROOT}" \
            -D ANDROID_NDK_ROOT="${NDK_ROOT}" \
            -D QT_HOST_PATH="${QT_HOST_PATH}" \
            -D CMAKE_TOOLCHAIN_FILE="${NDK_ROOT}/build/cmake/android.toolchain.cmake" \
            -D CMAKE_FIND_ROOT_PATH="${QT_ANDROID_PATH}" \
            -D CMAKE_PREFIX_PATH="${QT_ANDROID_PATH};${QT_HOST_PATH}"

      - name: Build
        run: cmake --build "${BUILD_DIR}" --config Release

      - name: Package APK (Qt androiddeployqt path)
        run: |
          cmake --build "${BUILD_DIR}" --target apk || true
          echo "Looking for APKs produced by androiddeployqt..."
          find "${BUILD_DIR}" -name "*.apk" -print || true

      - name: Upload APK/AAB artifacts
        uses: actions/upload-artifact@v4
        with:
          name: qgroundcontrol-android
          path: |
            ${BUILD_DIR}/**/*.apk
            ${BUILD_DIR}/**/*.aab
          if-no-files-found: warn

      # --- Optional: Align & Sign (set secrets to enable) ---
      # - name: Align & Sign
      #   if: ${{ secrets.ANDROID_KEYSTORE_BASE64 != '' }}
      #   env:
      #     ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      #     ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      #     ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      #     ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      #   run: |
      #     echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > my-release.keystore
      #     APK=$(find "${BUILD_DIR}" -name "*-release.apk" | head -n 1)
      #     if [ -z "$APK" ]; then
      #       echo "No release APK found to sign"; exit 1; fi
      #     "${ANDROID_SDK_ROOT}/build-tools/34.0.0/zipalign" -f 4 "$APK" aligned.apk
      #     "${ANDROID_SDK_ROOT}/build-tools/34.0.0/apksigner" sign \
      #        --ks my-release.keystore --ks-pass pass:"$ANDROID_KEYSTORE_PASSWORD" \
      #        --key-pass pass:"$ANDROID_KEY_PASSWORD" --ks-key-alias "$ANDROID_KEY_ALIAS" aligned.apk
      #     mv aligned.apk QGroundControl-signed.apk
      # - name: Upload signed APK
      #   if: ${{ always() }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: qgroundcontrol-android-signed
      #     path: QGroundControl-signed.apk
      #     if-no-files-found: warn