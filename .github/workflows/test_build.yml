name: Android Build (Qt 6.8.3, host-first)

on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      ANDROID_API: "34"
      BUILD_DIR: build-android
      QT_VERSION: "6.8.3"

    steps:
      - name: Identify this workflow
        run: |
          echo "This is .github/workflows/test_build.yml"
          echo "Run manually from Actions → this workflow → Run workflow (select branch: master)."

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept SDK licenses & install platforms
        run: |
          yes | sdkmanager --licenses || true
          sdkmanager "platform-tools" "platforms;android-${ANDROID_API}" "build-tools;34.0.0"

      - name: Setup Android NDK r27c
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c
          add-to-path: true

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      # ---------- Host Qt (install first - provides qt-cmake, rcc, etc.) ----------
      - name: Install Qt host (desktop gcc_64) (aqt, dynamic modules, fallback)
        id: qt_host
        run: |
          set -euo pipefail
          python3 -m pip install -U aqtinstall

          OUTPUT_DIR="$HOME/Qt"
          mkdir -p "$OUTPUT_DIR"

          # desired modules (edit this list if your project requires others)
          DESIRED="qtbase qttools qtdeclarative qtquickcontrols2 qtsvg qtserialport qtlocation qtpositioning qtimageformats qtconnectivity qtshadertools qt5compat"

          echo "Attempting to install Qt ${QT_VERSION} for desktop gcc_64 with modules: $DESIRED"
          # Try install; if aqt fails due to module availability, retry with minimal set
          if python3 -m aqt install-qt linux desktop ${QT_VERSION} gcc_64 --outputdir "$OUTPUT_DIR" --modules $DESIRED --silent --no-progress; then
            echo "Full host Qt install succeeded"
          else
            echo "Full host Qt install failed — falling back to minimal host modules (qtbase qttools)"
            python3 -m aqt install-qt linux desktop ${QT_VERSION} gcc_64 --outputdir "$OUTPUT_DIR" --modules qtbase qttools --silent --no-progress
          fi

          # Compute and export QT_HOST_PATH (QTDIR equivalent)
          QT_HOST_PATH="${OUTPUT_DIR}/${QT_VERSION}/gcc_64"
          echo "QT_HOST_PATH=${QT_HOST_PATH}" >> $GITHUB_ENV
          echo "Installed host Qt into: ${QT_HOST_PATH}"
          ls -al "${QT_HOST_PATH}" || true

      - name: Capture Host Qt path
        run: echo "QT_HOST_PATH=${QTDIR:-$QT_HOST_PATH}" >> $GITHUB_ENV

      - name: Verify qt-cmake exists and add to PATH (fail fast)
        run: |
          QT_CMAKE="${QT_HOST_PATH}/bin/qt-cmake"
          if [ -x "$QT_CMAKE" ]; then
            echo "Found qt-cmake at $QT_CMAKE"
          else
            CANDIDATES=(
              "/home/runner/Qt/${QT_VERSION}/gcc_64/bin/qt-cmake"
              "/opt/hostedtoolcache/Qt/${QT_VERSION}/gcc_64/bin/qt-cmake"
            )
            for c in "${CANDIDATES[@]}"; do
              if [ -x "$c" ]; then
                QT_CMAKE="$c"
                break
              fi
            done
          fi
          if [ -z "$QT_CMAKE" ]; then
            QT_CMAKE=$(find /home/runner /opt -type f -name qt-cmake -executable 2>/dev/null | head -n1 || true)
          fi
          if [ -z "$QT_CMAKE" ]; then
            echo "ERROR: qt-cmake not found after host Qt install. Diagnostic listings:"
            echo "Contents of QT_HOST_PATH (${QT_HOST_PATH}):"
            ls -al "${QT_HOST_PATH}" || true
            echo "/home/runner/Qt listing:"
            ls -al /home/runner/Qt || true
            echo "/opt/hostedtoolcache/Qt listing:"
            ls -al /opt/hostedtoolcache/Qt || true
            exit 1
          fi
          QT_BIN=$(dirname "$QT_CMAKE")
          echo "Adding $QT_BIN to PATH"
          echo "$QT_BIN" >> $GITHUB_PATH
          "$QT_CMAKE" --version || true

      # ---------- Qt for Android (install after host) ----------
      - name: Install Qt for Android (arm64-v8a) (aqt, dynamic modules, fallback)
        id: qt_android
        run: |
          set -euo pipefail
          python3 -m pip install -U aqtinstall

          OUTPUT_DIR="$HOME/Qt"
          mkdir -p "$OUTPUT_DIR"

          # desired Android modules (edit as needed)
          DESIRED_ANDROID="qtserialport qtlocation qtpositioning qtimageformats qtconnectivity qtshadertools"

          echo "Attempting to install Qt ${QT_VERSION} for android android_arm64_v8a with modules: $DESIRED_ANDROID"
          if python3 -m aqt install-qt linux android ${QT_VERSION} android_arm64_v8a --outputdir "$OUTPUT_DIR" --modules $DESIRED_ANDROID --silent --no-progress; then
            echo "Full android Qt install succeeded"
          else
            echo "Full android Qt install failed — retrying with minimal set (qtbase qttools) to ensure tools exist"
            python3 -m aqt install-qt linux android ${QT_VERSION} android_arm64_v8a --outputdir "$OUTPUT_DIR" --modules qtbase qttools --silent --no-progress || true
          fi

          ANDROID_QT_DIR="${OUTPUT_DIR}/${QT_VERSION}/android_arm64_v8a"
          echo "ANDROID_QT_DIR=${ANDROID_QT_DIR}" >> $GITHUB_ENV
          echo "Installed Android Qt into: ${ANDROID_QT_DIR}"
          ls -al "${ANDROID_QT_DIR}" || true

      - name: Capture Android Qt path
        run: echo "ANDROID_QT_DIR=${ANDROID_QT_DIR}" >> $GITHUB_ENV

      - name: Sanity check paths
        run: |
          echo "ANDROID_QT_DIR=${ANDROID_QT_DIR}"
          echo "QT_HOST_PATH=${QT_HOST_PATH}"
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}"
          echo "ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT}"
          echo "PATH=${PATH}"

      - name: Configure (qt-cmake)
        run: |
          # Use qt-cmake from Android Qt installation (not host Qt)
          QT_CMAKE_BIN="${ANDROID_QT_DIR}/bin/qt-cmake"
          if [ ! -x "$QT_CMAKE_BIN" ]; then
            echo "ERROR: qt-cmake not found at $QT_CMAKE_BIN"
            echo "Contents of ANDROID_QT_DIR (${ANDROID_QT_DIR}):"
            ls -al "${ANDROID_QT_DIR}" || true
            exit 1
          fi
          echo "Using $QT_CMAKE_BIN for configure"
          "$QT_CMAKE_BIN" -S . -B "${BUILD_DIR}" -G Ninja \
            -DQT_HOST_PATH="${QT_HOST_PATH}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DQT_ANDROID_ABIS=arm64-v8a \
            -DQT_ANDROID_BUILD_ALL_ABIS=OFF \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DANDROID_SDK_ROOT="${ANDROID_SDK_ROOT}" \
            -DANDROID_NDK_ROOT="${ANDROID_NDK_ROOT}"

      - name: Build
        run: cmake --build "${BUILD_DIR}" --config Release --parallel

      - name: Package APK/AAB (optional targets)
        continue-on-error: true
        run: |
          echo "Attempting to build APK/AAB if targets exist..."
          cmake --build "${BUILD_DIR}" --target apk 2>&1 | tee /tmp/apk-build.log || echo "apk target not available or failed"
          cmake --build "${BUILD_DIR}" --target aab 2>&1 | tee /tmp/aab-build.log || echo "aab target not available or failed"
          
          # List what we actually built
          echo "=== Build artifacts found ==="
          find "${BUILD_DIR}" -name "*.apk" -o -name "*.aab" 2>/dev/null || echo "No APK/AAB files found yet"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-output
          path: |
            ${{ env.BUILD_DIR }}/**/*.apk
            ${{ env.BUILD_DIR }}/**/*.aab
            ${{ env.BUILD_DIR }}/android-build/**/outputs/**/*.apk
            ${{ env.BUILD_DIR }}/android-build/**/outputs/**/*.aab
          if-no-files-found: warn
