name: Android Build test

on: workflow_dispatch

permissions:
  contents: read

env:
  JAVA_VERSION: "17"
  ANDROID_API: "34"
  BUILD_DIR: build-android
  QT_VERSION: "6.8.3"
  QT_HOST_ARCH: "gcc_64"
  QT_ANDROID_ARCH: "android_arm64_v8a"
  ANDROID_NDK_VERSION: "r27c"
  ANDROID_WORKDIR: "."                     # change if project lives in subdir
  ANDROID_SDK_ROOT: ${{ runner.temp }}/android-sdk
  GRADLEW_PATH: "./gradlew"
  GRADLE_TASK: "assembleDebug"

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 180

    steps:
      - name: Identify this workflow
        run: |
          echo "This is .github/workflows/android-build.yml"
          echo "Run manually from Actions → this workflow → Run workflow (select branch: master)."

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: Install system packages
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip wget zip python3-pip ca-certificates ninja-build pkg-config curl jq

      # ---------- Install Android SDK cmdline-tools and core packages ----------
      - name: Install Android SDK command-line tools and required packages
        shell: bash
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -euo pipefail
          echo "Using ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}"
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
          cd /tmp
          CLI_ZIP="commandlinetools-linux-latest.zip"
          if [ ! -f "${CLI_ZIP}" ]; then
            wget -q -O "${CLI_ZIP}" "https://dl.google.com/android/repository/commandlinetools-linux-latest.zip"
          fi
          unzip -q -o "${CLI_ZIP}" -d "${ANDROID_SDK_ROOT}/cmdline-tools"
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
          if [ -d "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools" ]; then
            mv "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools/"* "${ANDROID_SDK_ROOT}/cmdline-tools/latest/" || true
          fi
          export PATH="${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/platform-tools:${PATH}"
          yes | sdkmanager --licenses || true
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" "platform-tools" "platforms;android-${ANDROID_API}" "build-tools;34.0.0" || true
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" --list_installed || true

      - name: Install Android NDK (via sdkmanager)
        shell: bash
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
        run: |
          set -euo pipefail
          echo "Installing NDK ${ANDROID_NDK_VERSION} into ${ANDROID_SDK_ROOT}"
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" "ndk;${ANDROID_NDK_VERSION}" || true
          echo "NDK directories:"
          ls -la "${ANDROID_SDK_ROOT}/ndk" || true

      - name: Export Android SDK/NDK env
        run: |
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
          NDK_PATH="${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}"
          if [ ! -d "${NDK_PATH}" ]; then
            FIRST=$(ls -1 "${ANDROID_SDK_ROOT}/ndk" 2>/dev/null | head -n1 || true)
            if [ -n "$FIRST" ]; then
              NDK_PATH="${ANDROID_SDK_ROOT}/ndk/${FIRST}"
            fi
          fi
          echo "ANDROID_NDK_ROOT=${NDK_PATH}" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=${NDK_PATH}" >> $GITHUB_ENV
          echo "PATH=${ANDROID_SDK_ROOT}/platform-tools:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${PATH}" >> $GITHUB_ENV

      - name: Accept SDK licenses & show installed packages (debug)
        run: |
          set -euo pipefail
          yes | sdkmanager --licenses || true
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" --list_installed || true

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      # ---------- Host Qt (install first - provides qt-cmake, rcc, etc.) ----------
      - name: Prepare Python & certs for aqtinstall
        run: |
          python3 -m pip install --upgrade pip certifi || true
          sudo update-ca-certificates || true

      - name: Install aqtinstall (for Qt downloads)
        run: |
          python3 -m pip install --upgrade aqtinstall || true
          python3 -m aqt --version || true

      - name: Install Qt host (desktop gcc_64) (aqt, dynamic modules, fallback)
        id: qt_host
        run: |
          set -euo pipefail
          OUTPUT_DIR="$HOME/Qt"
          mkdir -p "$OUTPUT_DIR"

          DESIRED="qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors"

          echo "Attempting to install Qt ${QT_VERSION} for desktop ${QT_HOST_ARCH} with modules: $DESIRED"
          if python3 -m aqt install-qt linux desktop ${QT_VERSION} ${QT_HOST_ARCH} --outputdir "$OUTPUT_DIR" --modules $DESIRED --autodesktop; then
            echo "Full host Qt install succeeded"
          else
            echo "Full host Qt install failed — falling back to base install without extra modules"
            python3 -m aqt install-qt linux desktop ${QT_VERSION} ${QT_HOST_ARCH} --outputdir "$OUTPUT_DIR" --autodesktop || true
          fi

          QT_HOST_PATH="${OUTPUT_DIR}/${QT_VERSION}/${QT_HOST_ARCH}"
          if [ ! -d "${QT_HOST_PATH}" ]; then
            ALT=$(ls -1 "${OUTPUT_DIR}" | grep '^6\.' | tail -n1 || true)
            if [ -n "$ALT" ]; then
              QT_HOST_PATH="${OUTPUT_DIR}/${ALT}/${QT_HOST_ARCH}"
            fi
          fi

          echo "QT_HOST_PATH=${QT_HOST_PATH}" >> $GITHUB_ENV
          echo "Installed host Qt into: ${QT_HOST_PATH}"
          ls -al "${QT_HOST_PATH}" || true

      - name: Verify qt-cmake exists and add to PATH (fail fast)
        run: |
          QT_CMAKE="${QT_HOST_PATH}/bin/qt-cmake"
          if [ -x "$QT_CMAKE" ]; then
            echo "Found qt-cmake at $QT_CMAKE"
          else
            echo "qt-cmake not found at expected location; searching common locations..."
            CANDIDATES=(
              "/home/runner/Qt/${QT_VERSION}/${QT_HOST_ARCH}/bin/qt-cmake"
              "/home/runner/Qt/*/${QT_HOST_ARCH}/bin/qt-cmake"
              "/opt/hostedtoolcache/Qt/${QT_VERSION}/${QT_HOST_ARCH}/bin/qt-cmake"
            )
            for c in "${CANDIDATES[@]}"; do
              if [ -x "$c" ]; then
                QT_CMAKE="$c"
                break
              fi
            done
          fi
          if [ -z "$QT_CMAKE" ]; then
            QT_CMAKE=$(find /home/runner /opt -type f -name qt-cmake -executable 2>/dev/null | head -n1 || true)
          fi
          if [ -z "$QT_CMAKE" ]; then
            echo "ERROR: qt-cmake not found after host Qt install. Diagnostic listings:"
            echo "Contents of QT_HOST_PATH (${QT_HOST_PATH}):"
            ls -al "${QT_HOST_PATH}" || true
            echo "/home/runner/Qt listing:"
            ls -al /home/runner/Qt || true
            echo "/opt/hostedtoolcache/Qt listing:"
            ls -al /opt/hostedtoolcache/Qt || true
            exit 1
          fi
          QT_BIN=$(dirname "$QT_CMAKE")
          echo "Adding $QT_BIN to PATH"
          echo "$QT_BIN" >> $GITHUB_PATH
          "$QT_CMAKE" --version || true

      - name: Install Qt for Android (arm64-v8a) (aqt, dynamic modules, fallback)
        id: qt_android
        run: |
          set -euo pipefail
          python3 -m pip install -U aqtinstall || true
          OUTPUT_DIR="$HOME/Qt"
          mkdir -p "$OUTPUT_DIR"

          DESIRED_ANDROID="qtcharts qtlocation qtpositioning qtspeech qt5compat qtmultimedia qtserialport qtimageformats qtshadertools qtconnectivity qtquick3d qtsensors"

          echo "Attempting to install Qt ${QT_VERSION} for android ${QT_ANDROID_ARCH} with modules: $DESIRED_ANDROID"
          if python3 -m aqt install-qt linux android ${QT_VERSION} ${QT_ANDROID_ARCH} --outputdir "$OUTPUT_DIR" --modules $DESIRED_ANDROID --autodesktop; then
            echo "Full android Qt install succeeded"
          else
            echo "Full android Qt install failed — falling back to base install without extra modules"
            python3 -m aqt install-qt linux android ${QT_VERSION} ${QT_ANDROID_ARCH} --outputdir "$OUTPUT_DIR" --autodesktop || true
          fi

          ANDROID_QT_DIR="${OUTPUT_DIR}/${QT_VERSION}/${QT_ANDROID_ARCH}"
          if [ ! -d "${ANDROID_QT_DIR}" ]; then
            ALT=$(ls -1 "${OUTPUT_DIR}" | grep '^6\.' | tail -n1 || true)
            ANDROID_QT_DIR="${OUTPUT_DIR}/${ALT}/${QT_ANDROID_ARCH}"
          fi

          echo "ANDROID_QT_DIR=${ANDROID_QT_DIR}" >> $GITHUB_ENV
          echo "Installed Android Qt into: ${ANDROID_QT_DIR}"
          ls -al "${ANDROID_QT_DIR}" || true

      - name: Sanity check paths
        run: |
          echo "ANDROID_QT_DIR=${ANDROID_QT_DIR:-<not-set>}"
          echo "QT_HOST_PATH=${QT_HOST_PATH:-<not-set>}"
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}"
          echo "ANDROID_NDK_ROOT=${ANDROID_NDK_ROOT:-<not-set>}"
          echo "PATH=${PATH}"

      - name: Configure (qt-cmake)
        run: |
          set -euo pipefail
          QT_CMAKE_BIN="${QT_HOST_PATH}/bin/qt-cmake"
          if [ ! -x "${QT_CMAKE_BIN}" ]; then
            echo "ERROR: qt-cmake not found at ${QT_CMAKE_BIN}"
            ls -la "${QT_HOST_PATH}/bin" || true
            exit 1
          fi
          echo "Using $QT_CMAKE_BIN for configure"
          "$QT_CMAKE_BIN" -S . -B "${BUILD_DIR}" -G Ninja \
            -DCMAKE_PREFIX_PATH="${ANDROID_QT_DIR}" \
            -DQT_HOST_PATH="${QT_HOST_PATH}" \
            -DCMAKE_BUILD_TYPE=Release \
            -DQT_ANDROID_ABIS=arm64-v8a \
            -DQT_ANDROID_BUILD_ALL_ABIS=OFF \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DANDROID_SDK_ROOT="${ANDROID_SDK_ROOT}" \
            -DANDROID_NDK_ROOT="${ANDROID_NDK_ROOT}"

      - name: Build
        run: cmake --build "${BUILD_DIR}" --config Release --parallel

      - name: Package APK/AAB (optional targets)
        continue-on-error: true
        run: |
          echo "Attempting to build APK/AAB if targets exist..."
          cmake --build "${BUILD_DIR}" --target apk 2>&1 | tee /tmp/apk-build.log || echo "apk target not available or failed"
          cmake --build "${BUILD_DIR}" --target aab 2>&1 | tee /tmp/aab-build.log || echo "aab target not available or failed"
          echo "=== Build artifacts found ==="
          find "${BUILD_DIR}" -name "*.apk" -o -name "*.aab" -print || echo "No APK/AAB files found"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-output
          path: |
            ${{ env.BUILD_DIR }}/**/*.apk
            ${{ env.BUILD_DIR }}/**/*.aab
            ${{ env.BUILD_DIR }}/android-build/**/outputs/**/*.apk
            ${{ env.BUILD_DIR }}/android-build/**/outputs/**/*.aab
          if-no-files-found: warn
