name: Android APK (Manual)

on:
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-22.04

    env:
      QT_VERSION: "6.8.3"            # QGC requires 6.8.3…6.10.0
      ANDROID_API: "34"
      BUILD_DIR: "build-android"
      QT_HOST_KIT: "gcc_64"
      QT_ANDROID_KIT: "android_arm64_v8a"
      QT_BASE_URL: "https://download.qt.io"
      ANDROID_SDK_ROOT: "${{ github.workspace }}/android-sdk"
      ANDROID_HOME:    "${{ github.workspace }}/android-sdk"

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install Ninja + tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build python3-pip unzip zip curl
          python3 -m pip install --upgrade "aqtinstall>=3.3.0"

      - name: Set up NDK r27c
        id: ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c

      - name: Export NDK env
        run: |
          echo "ANDROID_NDK_HOME=${{ steps.ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=${{ steps.ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "NDK_ROOT=${{ steps.ndk.outputs.ndk-path }}" >> $GITHUB_ENV

      - name: Install Android SDK (cmdline-tools, platforms, build-tools)
        run: |
          set -e
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -fsSL https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/latest"

          yes | "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --licenses

          "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_SDK_ROOT" \
            "platform-tools" \
            "platforms;android-${ANDROID_API}" \
            "build-tools;34.0.0"

      - name: Install Qt ${QT_VERSION} (host + android)
        run: |
          set -e
          mkdir -p $HOME/Qt

          # Host kit
          for i in 1 2 3; do aqt install-qt --base "${QT_BASE_URL}" linux desktop ${QT_VERSION} ${QT_HOST_KIT} --outputdir $HOME/Qt && break || sleep 10; done

          # Android kit (modules commonly required by QGC)
          for i in 1 2 3; do aqt install-qt --base "${QT_BASE_URL}" linux android ${QT_VERSION} ${QT_ANDROID_KIT} --outputdir $HOME/Qt \
              -m qtserialport qtlocation qtpositioning qtsvg qtimageformats qtconnectivity qtshadertools qtquickcontrols2 qt5compat \
              && break || sleep 10; done

          echo "QT_HOST_PATH=$HOME/Qt/${QT_VERSION}/${QT_HOST_KIT}" >> $GITHUB_ENV
          echo "QT_ANDROID_PATH=$HOME/Qt/${QT_VERSION}/${QT_ANDROID_KIT}" >> $GITHUB_ENV

      - name: Locate Qt Android toolchain file
        run: |
          set -e
          HOST_FILE="$HOME/Qt/${QT_VERSION}/${QT_HOST_KIT}/lib/cmake/Qt6/qt.toolchain.cmake"
          ANDR_FILE="$HOME/Qt/${QT_VERSION}/${QT_ANDROID_KIT}/lib/cmake/Qt6/qt.toolchain.cmake"

          if [ -f "$HOST_FILE" ]; then
            echo "TOOLCHAIN_FILE=$HOST_FILE" >> $GITHUB_ENV
            echo "Using toolchain from host kit: $HOST_FILE"
          elif [ -f "$ANDR_FILE" ]; then
            echo "TOOLCHAIN_FILE=$ANDR_FILE" >> $GITHUB_ENV
            echo "Using toolchain from android kit: $ANDR_FILE"
          else
            echo "::error::qt.toolchain.cmake not found in expected locations."
            echo "Tried:"
            echo "  $HOST_FILE"
            echo "  $ANDR_FILE"
            echo "Listing host cmake dir (if present):"
            ls -la "$HOME/Qt/${QT_VERSION}/${QT_HOST_KIT}/lib/cmake/Qt6" || true
            echo "Listing android cmake dir (if present):"
            ls -la "$HOME/Qt/${QT_VERSION}/${QT_ANDROID_KIT}/lib/cmake/Qt6" || true
            exit 1
          fi

      - name: Configure (CMake)
        env:
          QT_HOST_PATH: ${{ env.QT_HOST_PATH }}
          QT_ANDROID_PATH: ${{ env.QT_ANDROID_PATH }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_NDK_ROOT: ${{ env.ANDROID_NDK_ROOT }}
          TOOLCHAIN_FILE: ${{ env.TOOLCHAIN_FILE }}
        run: |
          set -e
          echo "QT_HOST_PATH=$QT_HOST_PATH"
          echo "QT_ANDROID_PATH=$QT_ANDROID_PATH"
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT"
          echo "ANDROID_NDK_ROOT=$ANDROID_NDK_ROOT"
          echo "TOOLCHAIN_FILE=$TOOLCHAIN_FILE"

          cmake -S . -B "${BUILD_DIR}" -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE="${TOOLCHAIN_FILE}" \
            -DQT_HOST_PATH="${QT_HOST_PATH}" \
            -DQT_ANDROID_ABIS=arm64-v8a \
            -DQT_ANDROID_BUILD_ALL_ABIS=OFF \
            -DANDROID_SDK_ROOT="${ANDROID_SDK_ROOT}" \
            -DANDROID_NDK_ROOT="${ANDROID_NDK_ROOT}" \
            -DCMAKE_PREFIX_PATH="${QT_ANDROID_PATH};${QT_HOST_PATH}"

      - name: Build
        run: cmake --build "${BUILD_DIR}" --config Release -- -v

      - name: Package APK (best-effort)
        run: |
          cmake --build "${BUILD_DIR}" --target apk || true
          echo "Searching for APK/AAB…"
          find "${BUILD_DIR}" -name "*.apk" -print || true
          find "${BUILD_DIR}" -name "*.aab" -print || true

      - name: Upload APK/AAB
        uses: actions/upload-artifact@v4
        with:
          name: qgroundcontrol-android
          path: |
            ${BUILD_DIR}/**/*.apk
            ${BUILD_DIR}/**/*.aab
          if-no-files-found: warn