name: Android Build (Qt 6.8.3, host-first)

on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      ANDROID_API: "34"
      BUILD_DIR: build-android
      QT_VERSION: "6.8.3"

    steps:
      - name: Identify this workflow
        run: |
          echo "This is .github/workflows/test_build.yml"
          echo "Run manually from Actions → this workflow → Run workflow (select branch: master)."

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept SDK licenses & install platforms
        run: |
          yes | sdkmanager --licenses || true
          sdkmanager "platform-tools" "platforms;android-${ANDROID_API}" "build-tools;34.0.0"

      - name: Setup Android NDK r27c
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r27c
          add-to-path: true

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      # ---------- Qt installation using maintained action ----------
      - name: Install Qt host tools (linux desktop gcc_64)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: desktop
          arch: gcc_64
          modules: qtserialport qtlocation qtpositioning qtsvg qtimageformats qtconnectivity qtshadertools qtquickcontrols2 qt5compat

      - name: Install Qt for Android (arm64-v8a)
        uses: jurplel/install-qt-action@v4
        with:
          version: ${{ env.QT_VERSION }}
          host: linux
          target: android
          arch: android_arm64_v8a
          modules: qtserialport qtlocation qtpositioning qtsvg qtimageformats qtconnectivity qtshadertools qtquickcontrols2 qt5compat

      - name: Verify qt-cmake is available
        run: |
          which qt-cmake || true
          qt-cmake --version || true

      - name: Configure (qt-cmake)
        run: |
          # The action adds Qt tools to PATH, so qt-cmake is available directly
          qt-cmake -S . -B "${BUILD_DIR}" -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DQT_ANDROID_ABIS=arm64-v8a \
            -DQT_ANDROID_BUILD_ALL_ABIS=OFF \
            -DANDROID_PLATFORM=android-${ANDROID_API} \
            -DANDROID_SDK_ROOT="${ANDROID_SDK_ROOT}" \
            -DANDROID_NDK_ROOT="${ANDROID_NDK_ROOT}"

      - name: Build
        run: cmake --build "${BUILD_DIR}" --config Release --parallel

      - name: List build artifacts
        run: |
          echo "=== Searching for APK/AAB artifacts ==="
          find "${BUILD_DIR}" -type f \( -name "*.apk" -o -name "*.aab" \) 2>/dev/null || echo "No APK/AAB files found"
          echo ""
          echo "=== Contents of android-build directory ==="
          find "${BUILD_DIR}" -type d -name "android-build" -exec ls -laR {} \; 2>/dev/null || echo "android-build directory not found"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-output
          path: |
            ${{ env.BUILD_DIR }}/**/*.apk
            ${{ env.BUILD_DIR }}/**/*.aab
            ${{ env.BUILD_DIR }}/android-build/**/outputs/**/*.apk
            ${{ env.BUILD_DIR }}/android-build/**/outputs/**/*.aab
          if-no-files-found: warn
